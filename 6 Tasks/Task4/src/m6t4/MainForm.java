package m6t4;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

/**
 * The main application form.
 * 
 * @author aabyodj
 */
public class MainForm extends javax.swing.JFrame {
    
//    private static MainForm instance;

    static final int WAREHOUSE_CAPACITY = 100;
    
    volatile int warehouseLoad = 0;
    
    static final BlockingQueue<Ship> shipQueue = new LinkedBlockingQueue<>();
    
    /**
     * Creates new form NewApplication
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        m6t4.PierPanel pierPanel1 = new m6t4.PierPanel();
        m6t4.PierPanel pierPanel2 = new m6t4.PierPanel();
        m6t4.PierPanel pierPanel3 = new m6t4.PierPanel();
        m6t4.PierPanel pierPanel4 = new m6t4.PierPanel();
        lblLoad = new java.awt.Label();
        lblPortLoad = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Порт");
        setResizable(false);

        pierPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Причал 1"));

        pierPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Причал 2"));

        pierPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Причал 3"));

        pierPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Причал 4"));

        lblLoad.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblLoad.setText("Загрузка портовых складов:");

        lblPortLoad.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblPortLoad.setText("0/0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pierPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pierPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pierPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pierPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPortLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pierPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pierPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pierPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pierPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPortLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            MainForm instance = new MainForm();
            instance.setVisible(true);
            instance.showLoad();
            Ship.startTraffic();
        });
    }

    /**
     * Check if the port warehouse is empty.
     * @return 
     */
    boolean isEmpty() {
        return 0 == warehouseLoad;
    }

    /**
     * Check if the port warehouse is full.
     * @return 
     */
    boolean isFull() {
        return WAREHOUSE_CAPACITY == warehouseLoad;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label lblLoad;
    private java.awt.Label lblPortLoad;
    // End of variables declaration//GEN-END:variables

    /**
     * Reduce port warehouse load by one.
     * @return true if successful
     */
    boolean takeOne() {
        if (isEmpty()) return false;
        warehouseLoad--;
        showLoad();
        return true;
    }

    /**
     * Increase port warehouse load by one.
     * @return true if successful
     */
    boolean putOne() {
        if (isFull()) return false;
        warehouseLoad++;
        showLoad();
        return true;
    }

    /**
     * Show port warehouse load on the form.
     */
    private void showLoad() {
        StringBuilder result = new StringBuilder();
        result.append(warehouseLoad).append('/').append(WAREHOUSE_CAPACITY);
        lblPortLoad.setText(result.toString());
    }
}
